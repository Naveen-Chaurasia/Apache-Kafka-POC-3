

# by default KafkaTemplate use DefaultKafkaProducerFactory which is auto initialized by spring boot based on kafka producer
#  configuration provided in application.yml or application.properties file.

#If you wish to customized the default configuration then you need to provide a bean definition of KafkaTemplate.


#https://codingnconcepts.com/spring-boot/configure-kafka-producer-and-consumer/
#app:
#  kafka:
#    producer:
#      topic: <PRODUCER_TOPIC_NAME>
#    consumer:
#      topic: <CONSUMER_TOPIC_NAME_1, CONSUMER_TOPIC_NAME_2, CONSUMER_TOPIC_NAME_3>
##SPRING PROPERTIES
#spring:
#  kafka:
#  	bootstrap-servers: localhost:9200,localhost:9300,localhost:9400
#    properties:
#      #Server host name verification is disabled by setting ssl.endpoint.identification.algorithm to an empty string
#      ssl.endpoint.identification.algorithm:
#    ssl:
#      protocol: SSL
#      trust-store-location: classpath:/app/store/truststore.jks
#      trust-store-password: <TURST_STORE_PASSWORD>
#      key-store-location: classpath:/app/store/keystore.jks
#      key-store-password: <KEY_STORE_PASSWORD>
#      key-password: <KEY_PASSWORD>
#    producer:    
#      retries: 0
#      acks: all
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#    consumer:
#      group-id: <CONSUMER_GROUP_ID>
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer



#spring.kafka.bootstrap-servers	Comma separated list of kafka servers (host:port) running as a cluster. Applies to both producer and consumer unless overridden.
#spring.kafka.producer.bootstrap-servers	Kafka bootstrap server for producer. Overrides spring.kafka.bootstrap-servers
#spring.kafka.consumer.bootstrap-servers	Kafka bootstrap server for consumer. Overrides spring.kafka.bootstrap-servers
#spring.kafka.client-id	Client-ID to pass to the server when making requests. Used for server-side logging.
#spring.kafka.producer.client-id	Client-ID to pass for producer. Overrides spring.kafka.client-id
#spring.kafka.consumer.client-id	Client-ID to pass for consumer. Overrides spring.kafka.client-id
#spring.kafka.ssl.*	Kafka SSL configuration is to provide secure communication between producer/consumer and Kafka server. You need to generate key-store and trust-store files and configure the location and password
#spring.kafka.properties .ssl.endpoint.identification.algorithm	If you have enabled SSL for kafka Server, then host name verification can be disabled by setting this property to empty string, otherwise spring boot startup throw error
#spring.kafka.producer.*	Kafka Producer related configurations
#spring.kafka.consumer.*	Kafka Consumer related configurations
#We have also created application specific property to configure Kafka producer and consumer topics:-
#
#Property	Description
#app.kafka.producer.topic	Kafka topic name to publish messages
#app.kafka.consumer.topic	Comma separated list of Kafka topic names if you want consumer service to consume from multiple kafka topics